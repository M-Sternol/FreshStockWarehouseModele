// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseApp.Infrastructure;

#nullable disable

namespace FreshStockWarehouse.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactDetailInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerContactDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerContactDetailTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContactDetails");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerContactDetailTypes");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerRef")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRef")
                        .IsUnique();

                    b.ToTable("CustomerContactInformation");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CEOLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REGON")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.CompanyAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("CompanyAddresses");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.DeliveryInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryDelivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDeliveryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("DeliveryInformation");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.ProviderContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderRef")
                        .IsUnique();

                    b.ToTable("ProviderContactInformation");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.ProviderInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProviderInformation");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseDeliveryModel.DeliveryCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDeliveryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("DeliveryCompanies");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CEOLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("NIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REGON")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseAddresses");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactDetailInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactDetailTypId")
                        .HasColumnType("int");

                    b.Property<int>("ContactDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailTypeId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseContactDetails");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseContactDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WarehouseContactDetailTypes");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseRef")
                        .IsUnique();

                    b.ToTable("WarehouseContactInformation");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.CustomerOrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOrderHistories");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.ProviderOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderOrders");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.ProviderOrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderOrderHistories");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.WarehouseOrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseOrderHistories");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerOrderHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ProviderOrderHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseOrderHistoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderHistoryId");

                    b.HasIndex("CustomerOrderId");

                    b.HasIndex("DeliveryCompanyId");

                    b.HasIndex("ProviderOrderHistoryId");

                    b.HasIndex("ProviderOrderId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WarehouseOrderHistoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerAddress", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.CustomerModel.Customers", "Customers")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerContactDetail", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerContactDetailType", "CustomerContactDetailType")
                        .WithMany()
                        .HasForeignKey("CustomerContactDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshStockWarehouse.Domain.Model.CustomerModel.Customers", "Customers")
                        .WithMany("ContactDetail")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerContactDetailType");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerContactInformation", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.CustomerModel.Customers", "Customers")
                        .WithOne("CustomerContactInformation")
                        .HasForeignKey("FreshStockWarehouse.Domain.Model.CustomerModel.CustomerContactInformation", "CustomerRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.CompanyAddress", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", "Providers")
                        .WithMany("CompanyAddresses")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.DeliveryInformation", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", "Providers")
                        .WithMany("DeliveryInformation")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.ProviderContactInformation", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", "Providers")
                        .WithOne("ProviderContactInformation")
                        .HasForeignKey("FreshStockWarehouse.Domain.Model.ProviderModel.ProviderContactInformation", "ProviderRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.ProviderModel.ProviderInformation", "ProviderInformation")
                        .WithOne("Providers")
                        .HasForeignKey("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderInformation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseDeliveryModel.DeliveryCompany", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", "Provider")
                        .WithMany("DeliveryCompanies")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseAddress", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.Warehouse", "Warehouse")
                        .WithMany("Addresses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseContactDetail", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseContactDetailType", "ContactDetailType")
                        .WithMany()
                        .HasForeignKey("ContactDetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.Warehouse", "Warehouse")
                        .WithMany("WarehouseContactDetails")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactDetailType");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseContactInformation", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.Warehouse", "Warehouse")
                        .WithOne("WarehouseContactInformation")
                        .HasForeignKey("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.WarehouseContactInformation", "WarehouseRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.CustomerOrder", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.CustomerModel.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.CustomerOrderHistory", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.CustomerModel.Customers", "Customer")
                        .WithMany("OrderHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.ProviderOrder", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.ProviderOrderHistory", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", "Provider")
                        .WithMany("OrderHistories")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.WarehouseOrderHistory", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.Warehouse", "Warehouse")
                        .WithMany("OrderHistories")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Product", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.CustomerOrderHistory", null)
                        .WithMany("Products")
                        .HasForeignKey("CustomerOrderHistoryId");

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.CustomerOrder", null)
                        .WithMany("Products")
                        .HasForeignKey("CustomerOrderId");

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseDeliveryModel.DeliveryCompany", null)
                        .WithMany("Products")
                        .HasForeignKey("DeliveryCompanyId");

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Type", "Type")
                        .WithMany("Products")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.ProviderOrderHistory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProviderOrderHistoryId");

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.ProviderOrder", null)
                        .WithMany("Products")
                        .HasForeignKey("ProviderOrderId");

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.WarehouseOrderHistory", null)
                        .WithMany("Products")
                        .HasForeignKey("WarehouseOrderHistoryId");

                    b.Navigation("Type");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.ProductTag", b =>
                {
                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.CustomerModel.Customers", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactDetail");

                    b.Navigation("CustomerContactInformation")
                        .IsRequired();

                    b.Navigation("OrderHistories");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.ProviderInformation", b =>
                {
                    b.Navigation("Providers")
                        .IsRequired();
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.ProviderModel.Providers", b =>
                {
                    b.Navigation("CompanyAddresses");

                    b.Navigation("DeliveryCompanies");

                    b.Navigation("DeliveryInformation");

                    b.Navigation("OrderHistories");

                    b.Navigation("ProviderContactInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseDeliveryModel.DeliveryCompany", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseManagementModel.Warehouse", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("OrderHistories");

                    b.Navigation("Products");

                    b.Navigation("WarehouseContactDetails");

                    b.Navigation("WarehouseContactInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.CustomerOrder", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.CustomerOrderHistory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.ProviderOrder", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.ProviderOrderHistory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseOrderModel.WarehouseOrderHistory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Product", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("FreshStockWarehouse.Domain.Model.WarehouseModel.WarehouseProductsModel.Type", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
